{"componentChunkName":"component---src-templates-article-detail-js","path":"/articles/this的绑定机制 以及 手写实现call、apply、bind","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#this%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A\">this的四种绑定</a>\n<ul>\n<li><a href=\"#1-%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\">1 默认绑定</a></li>\n<li><a href=\"#2-%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A\">2 隐式绑定</a></li>\n<li><a href=\"#3-%E7%A1%AC%E7%BB%91%E5%AE%9A%E6%98%BE%E5%BC%8F%E7%BB%91%E5%AE%9A\">3 硬绑定、显式绑定</a></li>\n<li><a href=\"#4-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%91%E5%AE%9A\">4 构造函数绑定</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0\">手写实现</a>\n<ul>\n<li><a href=\"#callobj-p1-p2-\"><code class=\"language-text\">call(obj, p1, p2, …)</code></a></li>\n<li><a href=\"#applyobj-p1-p2-\"><code class=\"language-text\">apply(obj, [p1, p2, …])</code></a></li>\n<li><a href=\"#bindobj-p1-p2p3p4\"><code class=\"language-text\">bind(obj, p1, p2)(p3,p4,…)</code></a></li>\n</ul>\n</li>\n</ul>\n<h1>前言</h1>\n<blockquote>\n<p><code class=\"language-text\">call apply bind</code> 他们都是为了把对象绑定到这个函数的this上。</p>\n</blockquote>\n<p>其实我在这之前一直是这样理解的——\"把this绑定到函数上\"，毕竟传进来的参数是this，其实这么理解是正向的，但是一直感觉很难理解。直到今天看了一个视频，他这么反着一说，我突然有点茅塞顿开的感觉。其实仔细想一想，<code class=\"language-text\">call，apply，bind</code> 这三个函数执行的主体都是函数（函数中的this理解为占位符，他们只在执行该函数时才有明确的指向，因此我们需要清楚的知道，在某一时刻这个this到底表示的是什么，这也是JavaScript的一个难点。）而传入的参数是对象（只不过大多数时候，这个对象会是this）因此说把对象绑定到this上反而比较合适。</p>\n<p>这里要深刻理解还需要掌握this指向的绑定机制。大多数情况下，this的指向对于初学者都是一个难题，this可以理解为占位符，它为了能够使代码更加可复用从而不代表任何事物，因此需要了解this的绑定，绑定了才有指向。绑定的四种模式，分别是默认绑定，隐式绑定，硬绑定，构造函数绑定。</p>\n<h1>this的四种绑定</h1>\n<h2>1 默认绑定</h2>\n<p>默认绑定一般是指函数中的this，多用于回调函数，由于回调函数无执行主体，此时的this一般无指向undefined或为window。不过在setTimeout下比较特殊，都为window。</p>\n<h2>2 隐式绑定</h2>\n<p>这个是最常见的，哪个对象调用该函数，该函数中的this就指向谁。</p>\n<h2>3 硬绑定、显式绑定</h2>\n<p>就是用call、apply、bind进行this绑定，这里不但可以固定住this，也可以固定后续的参数，以后不管在哪里用，都不会改变。</p>\n<h2>4 构造函数绑定</h2>\n<p>new 函数绑定是比较抽象的一个，new 执行这个函数时的this指向new 实例化的对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子中，在new的时候，执行 <code class=\"language-text\">Person</code> 构造函数，在这个执行的过程中。<code class=\"language-text\">this</code> 指向 <code class=\"language-text\">bob</code> 对象。</p>\n<h1>手写实现</h1>\n<h2><code class=\"language-text\">call(obj, p1, p2, …)</code></h2>\n<p>先来看call，这里要注意call和apply的区别，call的参数是不收集成数组的，默认展开的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tobj <span class=\"token operator\">=</span> obj <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tempFn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span> rest<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当我们使用函数调用call的时候，比如 <code class=\"language-text\">add.call()</code> ，是不是相当于一个隐式绑定？因此<code class=\"language-text\">myCall</code>函数中的<code class=\"language-text\">this</code>其实就是要借用的函数<code class=\"language-text\">add</code>。我们希望由<code class=\"language-text\">obj</code>代替<code class=\"language-text\">add</code>函数中的<code class=\"language-text\">this</code>，所以我们这里可以构建成一个<code class=\"language-text\">obj.add()</code>的隐式绑定，,这样<code class=\"language-text\">add</code>函数中的<code class=\"language-text\">this</code>就绑定到了<code class=\"language-text\">obj</code>上。我们可以把这个函数，先复制给希望绑定到的对象——第一个参数<code class=\"language-text\">obj</code>身上。调用完了以后再删掉。这里为了不覆盖原有的属性，这里使用绝对不会重复的<code class=\"language-text\">symbol</code>类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<h2><code class=\"language-text\">apply(obj, [p1, p2, …])</code></h2>\n<p>再来看看apply，异曲同工。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tobj <span class=\"token operator\">=</span> obj <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tempFn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\trest <span class=\"token operator\">=</span> rest <span class=\"token operator\">?</span> rest <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">bind(obj, p1, p2)(p3,p4,…)</code></h2>\n<p>这里的 <code class=\"language-text\">bind</code> 其实是柯里化的，因此如果你有无限长的参数列表，无论从哪里断开分别传给第一次调用和第二次调用都是一样的。</p>\n<p>这里要注意与 <code class=\"language-text\">call, apply</code>不同之处。bind返回的是一个函数，那么函数就可以使用构造函数生成实例。并且具体表现在以下两点：</p>\n<ol>\n<li><strong>原生bind在构造函数new执行函数时this会丢失</strong>，如果不做特殊处理，this不会丢失。</li>\n<li><strong>new生成的实例有原型链</strong>，new执行的函数可以读取到原型链上的属性。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p3 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">+</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// undefined 21 72 2</span>\nadd<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> callFn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reFn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>secondRest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">reFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>secondRest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>secondRest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\treFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> reFn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">myBind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们之前提到过构造函数绑定，this此时是函数的实例，因此 <code class=\"language-text\">this instanceof reFn</code> 此时应该是 <code class=\"language-text\">True</code>。所以此时把 <code class=\"language-text\">add</code> 函数绑定到<code class=\"language-text\">this</code> 上。否则，就绑定到希望绑定的<code class=\"language-text\">obj</code>上。由于还需要实现原型链，我们令返回的函数的原型属性为 <code class=\"language-text\">add</code> 的原型对象，这样就完成了原型链。</p>\n<p>对于原型链的处理也可以采用老方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> callFn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reFn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>secondRest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">reFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>secondRest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>secondRest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">tempFn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\ttempFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n\treFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tempFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> reFn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"this的绑定机制 以及 手写实现call、apply、bind","label":"Javascript&手写实现","date":"2021-06-01 13:59","autonav":1},"timeToRead":5}},"pageContext":{"title":"this的绑定机制 以及 手写实现call、apply、bind"}},"staticQueryHashes":[]}