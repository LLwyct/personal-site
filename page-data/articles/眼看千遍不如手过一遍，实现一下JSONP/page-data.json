{"componentChunkName":"component---src-templates-article-detail-js","path":"/articles/眼看千遍不如手过一遍，实现一下JSONP","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">代码实现</a>\n<ul>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\">客户端</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF\">服务端</a></li>\n<li><a href=\"#%E7%BB%93%E6%9E%9C\">结果</a></li>\n</ul>\n</li>\n</ul>\n<p>相信很多人都看过jsonp的相关知识，对jsonp的工作原理大致有所了解，不过眼看千遍不如手写一遍，我今天就手写实现一下jsonp。</p>\n<h1>简介</h1>\n<p>JSONP全称json with padding是解决跨域问题的策略之一。</p>\n<p>该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，并构造出一个执行该函数的字符串，返回的字符串能直接作为js执行，这样客户端就可以定制自己的函数以处理返回的数据。</p>\n<p>如果要理解jsonp很重要的一点是，用script标签发起的请求的 <code class=\"language-text\">response</code> 的 <code class=\"language-text\">content-type</code> 是<code class=\"language-text\">application/javascript</code> ，这样保证返回的字符串能当做js直接执行，就和一个js文件一样。</p>\n<h1>代码实现</h1>\n<h2>客户端</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    hello, jsonp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getInfo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:8080?callback=getInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>第二个 <code class=\"language-text\">script</code> 中的内容表示向服务端请求数据，其中定义的函数是 <code class=\"language-text\">getInfo</code> ，我们服务端要做的就是，返回一个执行  <code class=\"language-text\">getInfo</code> 函数形式的字符串，比如 <code class=\"language-text\">&quot;getInfo({&quot;name&quot;: &quot;张三&quot;})&quot;</code> ，并把数据作为参数放在括号中。这个字符串会被当做js执行，也就触发了第一个<code class=\"language-text\">script</code> 标签中的函数，并且执行函数中的内容，在函数中组织后续的逻辑即可。</p>\n<h2>服务端</h2>\n<p>这里我用了 <code class=\"language-text\">Node.js</code> 原生的 <code class=\"language-text\">http</code>库，做一个方便复刻的演示。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> searchParams <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> funcName <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>funcName <span class=\"token operator\">===</span> <span class=\"token string\">\"getInfo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token operator\">:</span> <span class=\"token number\">24</span>\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/javascript\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>funcName <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们来主要关注一下中心函数体的内部逻辑。我们这里首先使用了 基于WHATWG标准的URL类，需要使用new 关键字来构造。</p>\n<p>看看文档里的描述：</p>\n<blockquote>\n<p>new URL(input: str[, base: str])\ninput 要解析的绝对或相对的输入 URL。 如果 input 是相对的，则需要 base。 如果 input 是绝对的，则忽略 base。</p>\n</blockquote>\n<p>因此我随便构造了一个base给它用。</p>\n<p>然后获取callback的函数名，如果该函数名与我们前端定义的接口一致，则把后端要传递的数据写入对象，并编成JSON格式，写入执行该函数形式的字符串。</p>\n<p>别忘了写入 头部 内容类型 为 <code class=\"language-text\">application/javascript</code> 。最后用 <code class=\"language-text\">end</code> 方法返回给客户端。</p>\n<h2>结果</h2>\n<p>我们在浏览器中打开该页面，就可以在控制台看到日志打印的内容了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210623201151664.png\" alt=\"在这里插入图片描述\"></p>","frontmatter":{"title":"眼看千遍不如手过一遍，实现一下JSONP","label":"手写实现&跨域","date":"2021-06-23 20:21:00","autonav":1},"timeToRead":2}},"pageContext":{"title":"眼看千遍不如手过一遍，实现一下JSONP"}},"staticQueryHashes":[]}