{"componentChunkName":"component---src-templates-article-detail-js","path":"/articles/朝花夕拾——动态规划","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C\">最长连续子序列和</a></li>\n<li><a href=\"#leetcode-300-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97-lis\">LeetCode 300. 最长递增子序列 LIS</a>\n- <a href=\"#%E6%96%B9%E6%B3%951%E6%9C%B4%E7%B4%A0%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">方法1：朴素动态规划</a>\n- <a href=\"#%E6%96%B9%E6%B3%952%E4%BA%8C%E5%88%86%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">方法2：二分+动态规划</a></li>\n<li><a href=\"#%E9%9D%9E%E8%BF%9E%E7%BB%AD%E6%9C%80%E5%A4%A7%E5%AD%90%E9%9B%86\">非连续最大子集</a></li>\n<li><a href=\"#leetcode-1143-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-lcs\">LeetCode 1143. 最长公共子序列 LCS</a></li>\n<li><a href=\"#hdu1506-largest-rectangle-in-a-histogram\">hdu1506 Largest Rectangle in a Histogram</a></li>\n<li><a href=\"#leetcode-338-counting-bits\">LeetCode 338. Counting Bits</a></li>\n<li><a href=\"#%E8%83%BD%E4%B8%8D%E8%83%BD%E7%BB%84%E6%88%90s\">能不能组成S？</a></li>\n<li><a href=\"#web%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB\">web数据挖掘中的编辑距离</a></li>\n<li><a href=\"#%E7%A8%8D%E5%BE%AE%E5%8F%98%E4%BA%86%E4%B8%80%E5%B0%8F%E4%B8%8B%E7%9A%8401%E8%83%8C%E5%8C%85\">稍微变了一小下的01背包</a></li>\n<li><a href=\"#96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\">96. 不同的二叉搜索树</a></li>\n<li><a href=\"#354-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98\">354. 俄罗斯套娃信封问题</a></li>\n</ul>\n<h1>Overview</h1>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvOTY2NDczLzIwMTgwMS85NjY0NzMtMjAxODAxMjMxMjI5NDE5NzUtMTA1NzIxMjU0MS5qcGc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h1>最长连续子序列和</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-2 6 -1 5 4 -7 2 3</code></pre></div>\n<p>求连续的子数列最大和。</p>\n<p>根据递归的思路想：<code class=\"language-text\">f(n) = max{ f(n-1) + num[n], num[n] }</code></p>\n<hr>\n<h1>LeetCode 300. 最长递增子序列 LIS</h1>\n<p>题目链接：<a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></p>\n<p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。（子序列可以不连续）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：nums = [10,9,2,5,3,7,101,18]\n输出：4\n解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。\n\n输入：nums = [7,7,7,7,7,7,7]\n输出：1</code></pre></div>\n<p>终于碰到这个题了，之前一直分不清LCS和LIS。</p>\n<h4>方法1：朴素动态规划</h4>\n<p>用一个二重循环来实现，时间复杂度n方。</p>\n<p>定义<code class=\"language-text\">dp[i]</code>的含义，以<code class=\"language-text\">nums[i]</code>结尾的子序列的最大长度。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>方法2：二分+动态规划</h4>\n<p>考虑方法一中的内层循环，是否可以优化。</p>\n<p>重新定义<code class=\"language-text\">dp[i]</code>，长度为<code class=\"language-text\">i</code>的子序列中最后一位数字的最小值。</p>\n<p>做法：维护一个单调数组<code class=\"language-text\">dp[]</code>，在遍历<code class=\"language-text\">nums[]</code>的时候，如果当前元素<code class=\"language-text\">a</code>比<code class=\"language-text\">dp</code>的栈顶元素大，则直接推入栈，如果比栈顶元素小，则二分这个数组，找到最小的比<code class=\"language-text\">a</code>大的数<code class=\"language-text\">dp[k]</code>，替换它，以保证在长度<code class=\"language-text\">k</code>下，dp[k]中的值始终最小。</p>\n<p><code class=\"language-text\">dp</code>的长度就是最终结果。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLIS</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> hi <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&lt;</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">+</span> hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    hi <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            dp<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>非连续最大子集</h1>\n<p>给你一个序列<code class=\"language-text\">arr = {}</code></p>\n<p>请你求出它的一个子集，要求，子集和最大，且子集的元素在原序列终不能相邻</p>\n<p>入门DP</p>\n<p>对于每一个数，<code class=\"language-text\">dp[i] = max{ dp[i-1], dp[i] + arr[i-1] }</code></p>\n<p>那么就和斐波那契有点像了</p>\n<hr>\n<h1>LeetCode 1143. 最长公共子序列 LCS</h1>\n<p>给定两个字符串 <code class=\"language-text\">text1</code> 和 <code class=\"language-text\">text2</code>，返回这两个字符串的最长 <code class=\"language-text\">公共子序列</code> 的长度。如果不存在 <code class=\"language-text\">公共子序列</code> ，返回 <code class=\"language-text\">0</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; \n输出：3  \n解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</code></pre></div>\n<p>创建二维数组<code class=\"language-text\">dp</code>，其中<code class=\"language-text\">dp[i][j]</code> 表示<code class=\"language-text\">text[0:i]</code>和<code class=\"language-text\">text2[0:j]</code>的最长公共子序列的长度。\n<img src=\"https://img-blog.csdnimg.cn/20210406150213127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YWxsb3dibGFuaw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">longestCommonSubsequence</span><span class=\"token punctuation\">(</span>string text1<span class=\"token punctuation\">,</span> string text2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1003</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1003</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> text2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>hdu1506 Largest Rectangle in a Histogram</h1>\n<p>对于每一个高度<code class=\"language-text\">h[i]</code>，搜索它能到达的最左，和最右，最大面积<code class=\"language-text\">Smax = Max{ i | 面积Si = (最右 - 最左 + 1) *h[i] }</code></p>\n<p>这样的时间复杂度为O（n^2）,必超时</p>\n<p>举例 2,3,4,5</p>\n<p>要判断2能到达最右的位置，不需要循环比较，只需要知道3能到达的最右是哪里，因为若3能到达的位置，2必然也能到达</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"> <span class=\"token number\">1</span> #include<span class=\"token operator\">&lt;</span>cstdio<span class=\"token operator\">></span>\n <span class=\"token number\">2</span> #include<span class=\"token operator\">&lt;</span>iostream<span class=\"token operator\">></span>\n <span class=\"token number\">3</span> <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n <span class=\"token number\">4</span> \n <span class=\"token number\">5</span> <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span>\n <span class=\"token number\">7</span>     <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n <span class=\"token number\">8</span>     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span>\n <span class=\"token number\">9</span>     <span class=\"token punctuation\">{</span>\n<span class=\"token number\">10</span>         <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> h<span class=\"token punctuation\">[</span><span class=\"token number\">100007</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">11</span>         <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> l<span class=\"token punctuation\">[</span><span class=\"token number\">100007</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">12</span>         <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">100007</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">13</span>         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">14</span>         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">15</span>             <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>             l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">18</span>         h<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> h<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">19</span>         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span>         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">21</span>             <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> h<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">22</span>                 l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">23</span>             <span class=\"token punctuation\">}</span>\n<span class=\"token number\">24</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">25</span>         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">26</span>         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">27</span>             <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> h<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">28</span>                 r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">29</span>             <span class=\"token punctuation\">}</span>\n<span class=\"token number\">30</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">31</span>         <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">32</span>         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">33</span>         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">34</span>             ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> ans <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">35</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">36</span>         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">37</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">38</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>LeetCode 338. Counting Bits</h1>\n<p>第一道自己做出来的DP！！！纪念合影，你没听错我就是这么菜</p>\n<p>给你一个非负整数num，求从0到num的num+1个数中，每个数二进制表示的1的个数，返回一个数组</p>\n<p>就是dp嘛，暴力的办法就是for from 0 to num，每个数的每一个二进制位比较，设二进制位最坏长度为31位，那么复杂度就是O（31*n）</p>\n<p>其中大量重复计算，所以用动态规划解决，自底向上</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"> <span class=\"token number\">1</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n <span class=\"token number\">2</span> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n <span class=\"token number\">3</span>     vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token number\">4</span>         vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">5</span>         dp<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">6</span>         dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">7</span>         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token number\">8</span>         <span class=\"token punctuation\">{</span>\n <span class=\"token number\">9</span>             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span>                 dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">11</span>             <span class=\"token keyword\">else</span>\n<span class=\"token number\">12</span>                 dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">13</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">14</span>         <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h1>能不能组成S？</h1>\n<p>给你一个序列<code class=\"language-text\">arr = {}</code>，和一个数S，问你序列里的数能不能组成S，又是简单的选和不选问题</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvOTY2NDczLzIwMTgwMS85NjY0NzMtMjAxODAxMjYyMTEwMzUzODEtMTkzNDkwMjY5Mi5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h1>web数据挖掘中的编辑距离</h1>\n<p>这个有点难想\n<img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTY2NDczLzIwMTgwNC85NjY0NzMtMjAxODA0MjQxMTAyNTMwOTUtMjI4NjY1MjcucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h1>稍微变了一小下的01背包</h1>\n<p>uim拉着基友小A到了一家……餐馆，很低端的那种。uim指着墙上的价目表说：“随便点”。</p>\n<p><strong>题目描述</strong>\n不过uim由于买了一些书，口袋里只剩M元(M≤10000)。</p>\n<p>餐馆虽低端，但是菜品种类不少，有N种(N≤100)，第i种卖a​元(ai​≤1000)。由于是很低端的餐馆，所以每种菜只有一份。</p>\n<p>小A奉行“不把钱吃光不罢休”，所以他点单一定刚好吧uim身上所有钱花完。他想知道有多少种点菜方法。</p>\n<p>思路：和裸的价值+容量的01背包不同，原来是求可放入背包且价值最大化，这个是必须装满背包，求有多少种方案。</p>\n<p>根据题意设数组dp[i][j]为前i种菜品恰好花费j元的点菜方法数。那么，考虑第i种菜点或不点，若不点，则说明前i-1种菜，已经恰好花费j元；若点，则说明前i-1种菜，花费j-ai元，这样，在点完第i种菜后，恰好花费j元。</p>\n<p>因此容易得出公式</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>ai<span class=\"token punctuation\">]</span></code></pre></div>\n<p>然而很多人想到这里以后就不知道接下来怎么做了。（比如说我）</p>\n<p>但是在看到\"j - ai\"后，应该能想到，对j - ai的情况进行枚举。</p>\n<ul>\n<li>若<code class=\"language-text\">j &gt; ai</code>，则和上式一样。</li>\n<li>若<code class=\"language-text\">j &lt; ai</code>，则说明第i道菜，压根就买不起，因此<code class=\"language-text\">dp[i][j] = dp[i-1][j]</code>。</li>\n<li>若<code class=\"language-text\">j == ai</code>，那么说明可以只点这一道菜作为一种新的方案，<code class=\"language-text\">dp[i][j] = dp[i-1][j] + 1</code>。</li>\n</ul>\n<hr>\n<h1>96. 不同的二叉搜索树</h1>\n<p>给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？</p>\n<p>来源：力扣（LeetCode）\n链接：<a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees/\">https://leetcode-cn.com/problems/unique-binary-search-trees/</a>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>这个题我一开始没有想到能拿dp做。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200717153551469.png\" alt=\"在这里插入图片描述\">\n<img src=\"https://img-blog.csdnimg.cn/20200717153604599.png\" alt=\"在这里插入图片描述\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numTrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> g<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> g<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h1>354. 俄罗斯套娃信封问题</h1>\n<p>题目链接：<a href=\"https://leetcode-cn.com/problems/russian-doll-envelopes/\">https://leetcode-cn.com/problems/russian-doll-envelopes/</a></p>\n<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式<code class=\"language-text\">(w, h)</code>出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\n<p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p>\n<p>说明:\n不允许旋转信封。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210304163556853.png\" alt=\"在这里插入图片描述\"></p>\n<p>是不是很像LIS的变型？但是这里要注意对原数组进行一个从小到大的排序。对于w从小到大排序，对于h从大到小排序，我这里还没有想明白，为什么h降序排序就是对的，升序排序就是错的。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">maxEnvelopes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> envelopes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> u<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>envelopes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> envelopes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>envelope <span class=\"token operator\">:</span> envelopes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&amp;&amp;</span> envelope<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>envelope<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> envelope<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> hi <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&lt;</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">+</span> hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&amp;&amp;</span> envelope<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                hi <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        dp<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>envelope<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> envelope<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我的代码还是比较复杂了，看了题解以后发现，只需要对h做LIS即可，因为h是降序排列的，当你对h做LIS时，别忘了，LIS是最长递增子序列，只要被你选入的h一定是递增的，但是你又是降序排列的，这说明你选取的两个信封一定有<code class=\"language-text\">w2 &gt; w1</code>，这里是严格大于，仔细想一想。</p>","frontmatter":{"title":"朝花夕拾——动态规划","label":"算法&动态规划&回顾","date":"2020-07-17 17:00:43","autonav":1},"timeToRead":10}},"pageContext":{"title":"朝花夕拾——动态规划"}},"staticQueryHashes":[]}